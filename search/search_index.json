{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview LuaLDAP is a simple interface from Lua to an LDAP client, in fact it is a bind to OpenLDAP client or ADSI . It enables a Lua program to: Connect to an LDAP server; Execute any operation (search, add, compare, delete, modify and rename); Retrieve entries and references of the search result. Status It's developed for Lua 5.1, 5.2, 5.3 & 5.4, and OpenLDAP 2.3 or newer. Download The sources are hosted on Github . Installation LuaLDAP is available via LuaRocks : luarocks install lualdap Debian packages are available on Debian or Ubuntu . RPM packages are available on Fedora .","title":"Home"},{"location":"#overview","text":"LuaLDAP is a simple interface from Lua to an LDAP client, in fact it is a bind to OpenLDAP client or ADSI . It enables a Lua program to: Connect to an LDAP server; Execute any operation (search, add, compare, delete, modify and rename); Retrieve entries and references of the search result.","title":"Overview"},{"location":"#status","text":"It's developed for Lua 5.1, 5.2, 5.3 & 5.4, and OpenLDAP 2.3 or newer.","title":"Status"},{"location":"#download","text":"The sources are hosted on Github .","title":"Download"},{"location":"#installation","text":"LuaLDAP is available via LuaRocks : luarocks install lualdap Debian packages are available on Debian or Ubuntu . RPM packages are available on Fedora .","title":"Installation"},{"location":"contributors/","text":"Contributors LuaLDAP was originally created by the Kepler Project (designed and implemented by Roberto Ierusalimschy, Andr\u00e9 Carregal and Tom\u00e1s Guisasola). A CVS-to-Git conversion was done by LuaForge from their project to a GitHub repository . From there, the community took over and moved in a new repository under the LuaLDAP GitHub organisation . The following maintainers curated fixes, improvements and releases: Brett Delle Grazie : 2014 - 2015 Dennis Schridde : 2017 - 2019 Fran\u00e7ois Perrad : 2021 Significant contributions were made by (in order of appearance): Matthew Wild mwild1@gmail.com : Bugfixes; curation of community patches Dennis Schridde devurandom@gmx.net : Lua 5.1, 5.2, 5.3 compatibility; OpenLDAP 2.3 compatibility; initial CircleCI and Codecov setup; bugfixes; curation of community patches Michael Bienia geser@ubuntu.com , Micah Gersten micahg@ubuntu.com , Luca Capello luca@pca.it : Bugfix for Debian John Regan john@jrjrtech.com : Initial Rockspec Dan Callaghan djc@djc.id.au : Initial test harness using a live OpenLDAP server; bugfixes Brett Delle Grazie brett.dellegrazie@indigoblue.co.uk : Documentation updates; curation of community patches Jakub Jirutka jakub@jirutka.cz : Initial Travis CI setup; bugfixes Victor Seva linuxmaniac@torreviejawireless.org : lualdap global variable only with Lua 5.1 Fran\u00e7ois Perrad francois.perrad@gadz.org : Lua 5.4 compatiblity, fix WinLDAP Daurnimator - Cleanup","title":"Contributors"},{"location":"contributors/#contributors","text":"LuaLDAP was originally created by the Kepler Project (designed and implemented by Roberto Ierusalimschy, Andr\u00e9 Carregal and Tom\u00e1s Guisasola). A CVS-to-Git conversion was done by LuaForge from their project to a GitHub repository . From there, the community took over and moved in a new repository under the LuaLDAP GitHub organisation . The following maintainers curated fixes, improvements and releases: Brett Delle Grazie : 2014 - 2015 Dennis Schridde : 2017 - 2019 Fran\u00e7ois Perrad : 2021 Significant contributions were made by (in order of appearance): Matthew Wild mwild1@gmail.com : Bugfixes; curation of community patches Dennis Schridde devurandom@gmx.net : Lua 5.1, 5.2, 5.3 compatibility; OpenLDAP 2.3 compatibility; initial CircleCI and Codecov setup; bugfixes; curation of community patches Michael Bienia geser@ubuntu.com , Micah Gersten micahg@ubuntu.com , Luca Capello luca@pca.it : Bugfix for Debian John Regan john@jrjrtech.com : Initial Rockspec Dan Callaghan djc@djc.id.au : Initial test harness using a live OpenLDAP server; bugfixes Brett Delle Grazie brett.dellegrazie@indigoblue.co.uk : Documentation updates; curation of community patches Jakub Jirutka jakub@jirutka.cz : Initial Travis CI setup; bugfixes Victor Seva linuxmaniac@torreviejawireless.org : lualdap global variable only with Lua 5.1 Fran\u00e7ois Perrad francois.perrad@gadz.org : Lua 5.4 compatiblity, fix WinLDAP Daurnimator - Cleanup","title":"Contributors"},{"location":"license/","text":"License LuaLDAP is free software: it can be used for both academic and commercial purposes at absolutely no cost. There are no royalties or GNU-like \"copyleft\" restrictions. LuaLDAP qualifies as Open Source software. Its licenses are compatible with GPL . LuaLDAP is not in the public domain and the Kepler Project keep its copyright. The legal details are below. The spirit of the license is that you are free to use LuaLDAP for any purpose at no cost without having to ask us. The only requirement is that if you do use LuaLDAP, then you should give us credit by including the appropriate copyright notice somewhere in your product or its documentation. The LuaLDAP library is designed and implemented by Roberto Ierusalimschy, Andr\u00e9 Carregal and Tom\u00e1s Guisasola. The implementation is not derived from licensed software. Copyright \u00a9 2003-2007 The Kepler Project. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"LuaLDAP is free software: it can be used for both academic and commercial purposes at absolutely no cost. There are no royalties or GNU-like \"copyleft\" restrictions. LuaLDAP qualifies as Open Source software. Its licenses are compatible with GPL . LuaLDAP is not in the public domain and the Kepler Project keep its copyright. The legal details are below. The spirit of the license is that you are free to use LuaLDAP for any purpose at no cost without having to ask us. The only requirement is that if you do use LuaLDAP, then you should give us credit by including the appropriate copyright notice somewhere in your product or its documentation. The LuaLDAP library is designed and implemented by Roberto Ierusalimschy, Andr\u00e9 Carregal and Tom\u00e1s Guisasola. The implementation is not derived from licensed software. Copyright \u00a9 2003-2007 The Kepler Project. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"manual/","text":"Introduction LuaLDAP is a simple interface from Lua to an LDAP client, in fact it is a bind to OpenLDAP client or ADSI . LuaLDAP defines one single global variable: a table called lualdap . This table holds the functions used to create an LDAP connection object. A connection object offers methods to perform any operation on the directory such as comparing values, adding new entries, modifying attributes on existing entries, removing entries, and the most common of all: searching. Entries are represented as Lua tables; attributes are its fields. The attribute values can be strings or tables of strings (used to represent multiple values). Representing attributes Many LDAP operations manage sets of attributes and values. LuaLDAP provides a uniform way of representing them by using Lua tables. The table attributes can be Lua string, a binary string (a string of bits), or table of n values indexed from 1 to n . Some operations have different approaches that will be explained as necessary. Here is a simple example: entry = { an_attribute = \"a value\", other_attribute = { \"first value of other attribute\", \"another value of other attribute\", }, } Attribute names cannot contain the '\\0' character. Distinguished names The distinguished name (DN) is the term used to identify an entry on the directory information tree. It is formed by the relative distinguished name (RDN) of the entry and the distinguished name of its parent. LuaLDAP will always use a string to represent the DN of any entry. A more precise definition can be found on the LDAP documentation. A list of some of these files can be found in Related documentation section. Initialization functions LuaLDAP provides a single way to connect to an LDAP server: lualdap.open_simple (hostname, who, password, usetls) Initializes a session with an LDAP server. The argument hostname may contain a blank-separated list of hosts to try to connect to, and each host may optionally by of the form host:port. The argument who should be the distinguished name of the entry that has the password to be checked against the third argument, password . The optional argument usetls is a Boolean flag indicating if Transport Layer Security (TLS) should be used. Returns a connection object if the operation was successful. In case of error it returns nil followed by an error string. lualdap.open (hostname, usetls) Open and initialize a connection to a LDAP server (without binding, see method bind_simple ). The argument hostname may contain a blank-separated list of hosts to try to connect to, and each host may optionally by of the form host:port. The optional argument usetls is a Boolean flag indicating if Transport Layer Security (TLS) should be used. Returns a connection object if the operation was successful. In case of error it returns nil followed by an error string. lualdap.initialize (uri) DEPRECATED in favor of open Open and initialize a connection to a server (without binding, see method bind_simple ). The uri parameter may be a comma- or whitespace-separated list of URIs containing only the schema, the host, and the port fields. Returns a connection object if the operation was successful. Connection objects A connection object offers methods which implement LDAP operations. Almost all of them need a distinguished name to identify the entry on which the operation will be executed. These methods execute asynchronous operations and return a function that should be called to obtain the results. The called functions will return true indicating the success of the operation. The only exception is the compare function which can return either true or false (as the result of the comparison) on a successful operation. There are two types of errors: API errors , such as wrong parameters, absent connection etc.; and LDAP errors , such as malformed DN, unknown attribute etc. API errors will raise a Lua error, while LDAP errors will be reported by the function/method returning nil plus the error message provided by the OpenLDAP client. A connection object can be created by calling the Initialization function . Methods conn:add (distinguished_name, table_of_attributes) Adds a new entry to the directory with the given attributes and values. conn:bind_simple (username, password) Bind to the directory. Returns the connection object if the operation was successful. In case of error it returns nil followed by an error string. conn:close () Closes the connection conn . conn:compare (distinguished_name, attribute, value) Compares a value to an entry. conn:delete (distinguished_name) Deletes an entry from the directory. conn:modify (distinguished_name, table_of_operations*) Changes the values of attributes in the given entry. The tables of operations are tables of attributes with the value on index 1 indicating the operation to be performed. The valid operations are: + to add the values to the attributes - to delete the values of the attributes = to replace the values of the attributes Any number of tables of operations will be used in a single LDAP modify operation. conn:rename (distinguished_name, new_relative_dn, new_parent) Changes an entry name (i.e. change its distinguished name ). conn:search (table_of_search_parameters) Performs a search operation on the directory. The parameters are described below: attrs a string or a list of attribute names to be retrieved (default is to retrieve all attributes). attrsonly a Boolean value that must be either false (default) if both attribute names and values are to be retrieved, or true if only names are wanted. base The distinguished name of the entry at which to start the search. filter A string representing the search filter as described in String Representation of LDAP Search Filters scope A string indicating the scope of the search. The valid strings are: base , onelevel and subtree . The empty string ( \"\" ) and nil will be treated as the default scope. sizelimit The maximum number of entries to return (default is no limit). timeout The timeout in seconds (default is no timeout). The precision is microseconds. The search method will return a search iterator which is a function that requires no arguments. The search iterator is used to get the search result and will return a string representing the distinguished name and a table of attributes as returned by the search request. Example here is a some sample code that demonstrate the basic use of the library. local lualdap = require \"lualdap\" local ld = assert (lualdap.open_simple (\"ldap.server\", \"mydn=manoeljoaquim,ou=people,dc=ldap,dc=world\", \"mysecurepassword\")) for dn, attribs in ld:search { base = \"ou=people,dc=ldap,dc=world\" } do io.write (string.format (\"\\t[%s]\\n\", dn)) for name, values in pairs (attribs) do io.write (\"[\"..name..\"] : \") if type (values) == \"string\" then io.write (values) elseif type (values) == \"table\" then local n = #values for i = 1, (n-1) do io.write (values[i]..\",\") end io.write (values[n]) end io.write (\"\\n\") end end ld:add (\"mydn=newuser,ou=people,dc=ldap,dc=world\", { objectClass = { \"\", \"\", }, mydn = \"newuser\", abc = \"qwerty\", tel = { \"123456758\", \"98765432\", }, givenName = \"New User\", })() ld:modify {\"mydn=newuser,ou=people,dc=ldp,dc=world\", { '=', givenName = \"New\", cn = \"New\", sn = \"User\", }, { '+', o = { \"University\", \"College\", }, mail = \"newuser@university.edu\", }, { '-', abc = true, tel = \"123456758\", }, { '+', tel = \"13579113\", }, }() ld:delete (\"mydn=newuser,ou=people,dc=ldp,dc=world\")() Related documentation Lightweight Directory Access Protocol (LDAP): The Protocol Lightweight Directory Access Protocol (LDAP): Technical Specification Lightweight Directory Access Protocol (LDAP): String Representation of Search Filters The C LDAP Application Program Interface OpenLDAP API WinLDAP API","title":"Manual"},{"location":"manual/#introduction","text":"LuaLDAP is a simple interface from Lua to an LDAP client, in fact it is a bind to OpenLDAP client or ADSI . LuaLDAP defines one single global variable: a table called lualdap . This table holds the functions used to create an LDAP connection object. A connection object offers methods to perform any operation on the directory such as comparing values, adding new entries, modifying attributes on existing entries, removing entries, and the most common of all: searching. Entries are represented as Lua tables; attributes are its fields. The attribute values can be strings or tables of strings (used to represent multiple values).","title":"Introduction"},{"location":"manual/#representing-attributes","text":"Many LDAP operations manage sets of attributes and values. LuaLDAP provides a uniform way of representing them by using Lua tables. The table attributes can be Lua string, a binary string (a string of bits), or table of n values indexed from 1 to n . Some operations have different approaches that will be explained as necessary. Here is a simple example: entry = { an_attribute = \"a value\", other_attribute = { \"first value of other attribute\", \"another value of other attribute\", }, } Attribute names cannot contain the '\\0' character.","title":"Representing attributes"},{"location":"manual/#distinguished-names","text":"The distinguished name (DN) is the term used to identify an entry on the directory information tree. It is formed by the relative distinguished name (RDN) of the entry and the distinguished name of its parent. LuaLDAP will always use a string to represent the DN of any entry. A more precise definition can be found on the LDAP documentation. A list of some of these files can be found in Related documentation section.","title":"Distinguished names"},{"location":"manual/#initialization-functions","text":"LuaLDAP provides a single way to connect to an LDAP server:","title":"Initialization functions"},{"location":"manual/#lualdapopen_simple-hostname-who-password-usetls","text":"Initializes a session with an LDAP server. The argument hostname may contain a blank-separated list of hosts to try to connect to, and each host may optionally by of the form host:port. The argument who should be the distinguished name of the entry that has the password to be checked against the third argument, password . The optional argument usetls is a Boolean flag indicating if Transport Layer Security (TLS) should be used. Returns a connection object if the operation was successful. In case of error it returns nil followed by an error string.","title":"lualdap.open_simple (hostname, who, password, usetls)"},{"location":"manual/#lualdapopen-hostname-usetls","text":"Open and initialize a connection to a LDAP server (without binding, see method bind_simple ). The argument hostname may contain a blank-separated list of hosts to try to connect to, and each host may optionally by of the form host:port. The optional argument usetls is a Boolean flag indicating if Transport Layer Security (TLS) should be used. Returns a connection object if the operation was successful. In case of error it returns nil followed by an error string.","title":"lualdap.open (hostname, usetls)"},{"location":"manual/#lualdapinitialize-uri-deprecated-in-favor-of-open","text":"Open and initialize a connection to a server (without binding, see method bind_simple ). The uri parameter may be a comma- or whitespace-separated list of URIs containing only the schema, the host, and the port fields. Returns a connection object if the operation was successful.","title":"lualdap.initialize (uri) DEPRECATED in favor of open"},{"location":"manual/#connection-objects","text":"A connection object offers methods which implement LDAP operations. Almost all of them need a distinguished name to identify the entry on which the operation will be executed. These methods execute asynchronous operations and return a function that should be called to obtain the results. The called functions will return true indicating the success of the operation. The only exception is the compare function which can return either true or false (as the result of the comparison) on a successful operation. There are two types of errors: API errors , such as wrong parameters, absent connection etc.; and LDAP errors , such as malformed DN, unknown attribute etc. API errors will raise a Lua error, while LDAP errors will be reported by the function/method returning nil plus the error message provided by the OpenLDAP client. A connection object can be created by calling the Initialization function .","title":"Connection objects"},{"location":"manual/#methods","text":"","title":"Methods"},{"location":"manual/#connadd-distinguished_name-table_of_attributes","text":"Adds a new entry to the directory with the given attributes and values.","title":"conn:add (distinguished_name, table_of_attributes)"},{"location":"manual/#connbind_simple-username-password","text":"Bind to the directory. Returns the connection object if the operation was successful. In case of error it returns nil followed by an error string.","title":"conn:bind_simple (username, password)"},{"location":"manual/#connclose","text":"Closes the connection conn .","title":"conn:close ()"},{"location":"manual/#conncompare-distinguished_name-attribute-value","text":"Compares a value to an entry.","title":"conn:compare (distinguished_name, attribute, value)"},{"location":"manual/#conndelete-distinguished_name","text":"Deletes an entry from the directory.","title":"conn:delete (distinguished_name)"},{"location":"manual/#connmodify-distinguished_name-table_of_operations","text":"Changes the values of attributes in the given entry. The tables of operations are tables of attributes with the value on index 1 indicating the operation to be performed. The valid operations are: + to add the values to the attributes - to delete the values of the attributes = to replace the values of the attributes Any number of tables of operations will be used in a single LDAP modify operation.","title":"conn:modify (distinguished_name, table_of_operations*)"},{"location":"manual/#connrename-distinguished_name-new_relative_dn-new_parent","text":"Changes an entry name (i.e. change its distinguished name ).","title":"conn:rename (distinguished_name, new_relative_dn, new_parent)"},{"location":"manual/#connsearch-table_of_search_parameters","text":"Performs a search operation on the directory. The parameters are described below: attrs a string or a list of attribute names to be retrieved (default is to retrieve all attributes). attrsonly a Boolean value that must be either false (default) if both attribute names and values are to be retrieved, or true if only names are wanted. base The distinguished name of the entry at which to start the search. filter A string representing the search filter as described in String Representation of LDAP Search Filters scope A string indicating the scope of the search. The valid strings are: base , onelevel and subtree . The empty string ( \"\" ) and nil will be treated as the default scope. sizelimit The maximum number of entries to return (default is no limit). timeout The timeout in seconds (default is no timeout). The precision is microseconds. The search method will return a search iterator which is a function that requires no arguments. The search iterator is used to get the search result and will return a string representing the distinguished name and a table of attributes as returned by the search request.","title":"conn:search (table_of_search_parameters)"},{"location":"manual/#example","text":"here is a some sample code that demonstrate the basic use of the library. local lualdap = require \"lualdap\" local ld = assert (lualdap.open_simple (\"ldap.server\", \"mydn=manoeljoaquim,ou=people,dc=ldap,dc=world\", \"mysecurepassword\")) for dn, attribs in ld:search { base = \"ou=people,dc=ldap,dc=world\" } do io.write (string.format (\"\\t[%s]\\n\", dn)) for name, values in pairs (attribs) do io.write (\"[\"..name..\"] : \") if type (values) == \"string\" then io.write (values) elseif type (values) == \"table\" then local n = #values for i = 1, (n-1) do io.write (values[i]..\",\") end io.write (values[n]) end io.write (\"\\n\") end end ld:add (\"mydn=newuser,ou=people,dc=ldap,dc=world\", { objectClass = { \"\", \"\", }, mydn = \"newuser\", abc = \"qwerty\", tel = { \"123456758\", \"98765432\", }, givenName = \"New User\", })() ld:modify {\"mydn=newuser,ou=people,dc=ldp,dc=world\", { '=', givenName = \"New\", cn = \"New\", sn = \"User\", }, { '+', o = { \"University\", \"College\", }, mail = \"newuser@university.edu\", }, { '-', abc = true, tel = \"123456758\", }, { '+', tel = \"13579113\", }, }() ld:delete (\"mydn=newuser,ou=people,dc=ldp,dc=world\")()","title":"Example"},{"location":"manual/#related-documentation","text":"Lightweight Directory Access Protocol (LDAP): The Protocol Lightweight Directory Access Protocol (LDAP): Technical Specification Lightweight Directory Access Protocol (LDAP): String Representation of Search Filters The C LDAP Application Program Interface OpenLDAP API WinLDAP API","title":"Related documentation"},{"location":"news/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased 1.3.0 - 2021-06-05 Added a new method open which deprecates initialize Changed bind_simple returns the connection (instead of true ) the Lua compatibility (5.1 to 5.4) is done without the compat-5.3 module 1.2.6 - 2021-03-17 Added Lua 5.4 compatibility Updated documentation is available on https://lualdap.github.io/lualdap/ Fixed Fix case in Makefile when install directory does not exist WinLDAP variant issue #10: space-separated list of hostnames doesn't work anymore Removed Dropped the claim that we support OpenLDAP older than 2.3, which was not true since 3597ac91334dbaa912db391f5e9fd7a15a643686 1.2.5 - 2019-01-06 Changed CPPFLAGS , CFLAGS and LDFLAGS can now be overridden on the make command line. It is not longer necessary to edit the config file. Removed We no longer export a lualdap global variable, in accordance with Lua 5.2 module rules (#8) cf. https://www.lua.org/manual/5.2/manual.html#8.2 Remove support for Lua 5.0 by including an external file outside the source directory Support for Lua 5.1 and 5.2 continues through our inclusion of lua-compat-5.3 (see release notes for v1.2.4-rc1) 1.2.4 - 2019-01-02 Added Build system additions to accomodate Debian 1.2.4-rc1 - 2018-12-22 Added Lua 5.3 compatibility Backwards compatibility using Kepler Project's lua-compat-5.3 Support specifying a URI in hostname argument to open_simple() Changed Switch to busted unit testing framework Automate building and running unit tests using CircleCI Tests run against OpenShift's OpenLDAP 2.4.41 ( source ) Keep track of unit test coverage using Codecov Fixed C89 compatibility Fix two credentials-related segfaults in open_simple() 1.2.3 - 2015-04-09 Changed documentation 1.2.2 - 2014-07-26 Changed lualdap_bind_simple() with OpenLDAP 2.3 API 1.2.1 - 2014-06-29 Added from prosody.im, new function initialize and new method bind_simple 1.2.0 - 2014-02-21 Added Lua 5.2 compatibility OpenLDAP 2.3 compatibility rockspec 1.1.0 - 2007-12-14 Added support ADSI (WinLDAP) (Thanks to Mark Edgar) 1.0.1 - 2006-04-04 1.0 - 2005-06-10 1.0-alpha - 2003-12-10","title":"News"},{"location":"news/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"news/#unreleased","text":"","title":"Unreleased"},{"location":"news/#130-2021-06-05","text":"","title":"1.3.0 - 2021-06-05"},{"location":"news/#added","text":"a new method open which deprecates initialize","title":"Added"},{"location":"news/#changed","text":"bind_simple returns the connection (instead of true ) the Lua compatibility (5.1 to 5.4) is done without the compat-5.3 module","title":"Changed"},{"location":"news/#126-2021-03-17","text":"","title":"1.2.6 - 2021-03-17"},{"location":"news/#added_1","text":"Lua 5.4 compatibility Updated documentation is available on https://lualdap.github.io/lualdap/","title":"Added"},{"location":"news/#fixed","text":"Fix case in Makefile when install directory does not exist WinLDAP variant issue #10: space-separated list of hostnames doesn't work anymore","title":"Fixed"},{"location":"news/#removed","text":"Dropped the claim that we support OpenLDAP older than 2.3, which was not true since 3597ac91334dbaa912db391f5e9fd7a15a643686","title":"Removed"},{"location":"news/#125-2019-01-06","text":"","title":"1.2.5 - 2019-01-06"},{"location":"news/#changed_1","text":"CPPFLAGS , CFLAGS and LDFLAGS can now be overridden on the make command line. It is not longer necessary to edit the config file.","title":"Changed"},{"location":"news/#removed_1","text":"We no longer export a lualdap global variable, in accordance with Lua 5.2 module rules (#8) cf. https://www.lua.org/manual/5.2/manual.html#8.2 Remove support for Lua 5.0 by including an external file outside the source directory Support for Lua 5.1 and 5.2 continues through our inclusion of lua-compat-5.3 (see release notes for v1.2.4-rc1)","title":"Removed"},{"location":"news/#124-2019-01-02","text":"","title":"1.2.4 - 2019-01-02"},{"location":"news/#added_2","text":"Build system additions to accomodate Debian","title":"Added"},{"location":"news/#124-rc1-2018-12-22","text":"","title":"1.2.4-rc1 - 2018-12-22"},{"location":"news/#added_3","text":"Lua 5.3 compatibility Backwards compatibility using Kepler Project's lua-compat-5.3 Support specifying a URI in hostname argument to open_simple()","title":"Added"},{"location":"news/#changed_2","text":"Switch to busted unit testing framework Automate building and running unit tests using CircleCI Tests run against OpenShift's OpenLDAP 2.4.41 ( source ) Keep track of unit test coverage using Codecov","title":"Changed"},{"location":"news/#fixed_1","text":"C89 compatibility Fix two credentials-related segfaults in open_simple()","title":"Fixed"},{"location":"news/#123-2015-04-09","text":"","title":"1.2.3 - 2015-04-09"},{"location":"news/#changed_3","text":"documentation","title":"Changed"},{"location":"news/#122-2014-07-26","text":"","title":"1.2.2 - 2014-07-26"},{"location":"news/#changed_4","text":"lualdap_bind_simple() with OpenLDAP 2.3 API","title":"Changed"},{"location":"news/#121-2014-06-29","text":"","title":"1.2.1 - 2014-06-29"},{"location":"news/#added_4","text":"from prosody.im, new function initialize and new method bind_simple","title":"Added"},{"location":"news/#120-2014-02-21","text":"","title":"1.2.0 - 2014-02-21"},{"location":"news/#added_5","text":"Lua 5.2 compatibility OpenLDAP 2.3 compatibility rockspec","title":"Added"},{"location":"news/#110-2007-12-14","text":"","title":"1.1.0 - 2007-12-14"},{"location":"news/#added_6","text":"support ADSI (WinLDAP) (Thanks to Mark Edgar)","title":"Added"},{"location":"news/#101-2006-04-04","text":"","title":"1.0.1 - 2006-04-04"},{"location":"news/#10-2005-06-10","text":"","title":"1.0 - 2005-06-10"},{"location":"news/#10-alpha-2003-12-10","text":"","title":"1.0-alpha - 2003-12-10"}]}